{"version":3,"file":"content.js","mappings":"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","sources":["webpack://ip-graph-extension/./src/content/content.ts"],"sourcesContent":["// src/content/content.ts\nconsole.log('IP Graph content script loaded');\n\n// Configuration\nconst CONFIG = {\n  enableAutoDetection: true,\n  showFloatingIndicator: true,\n  highlightDetectedIPs: true,\n  debounceDelay: 1000\n};\n\n// IP detection patterns (renamed to avoid conflict)\nconst CONTENT_IP_PATTERNS = {\n  ethereum: /0x[a-fA-F0-9]{40}/g,\n  ensName: /[a-zA-Z0-9-]+\\.eth/g,\n  storyIP: /0x[a-fA-F0-9]{40}/g\n};\n\n// Detected IPs storage (renamed and fixed type)\nlet contentDetectedIPs: Array<{\n  ip: string;\n  type: string;\n  element: HTMLElement;\n  context: string;\n}> = [];\n\nlet floatingIndicator: HTMLElement | null = null;\nlet debounceTimer: number | null = null;\n\n// Initialize content script\nfunction initialize(): void {\n  if (CONFIG.enableAutoDetection) {\n    detectIPsOnPage();\n    setupMutationObserver();\n  }\n  \n  setupMessageListener();\n  console.log('IP Graph content script initialized');\n}\n\n// Detect IPs on the current page\nfunction detectIPsOnPage(): void {\n  const newDetectedIPs: typeof contentDetectedIPs = [];\n  \n  // Get all text nodes\n  const walker = document.createTreeWalker(\n    document.body,\n    NodeFilter.SHOW_TEXT,\n    {\n      acceptNode: (node) => {\n        // Skip script and style elements\n        const parent = node.parentElement;\n        if (parent && ['SCRIPT', 'STYLE', 'NOSCRIPT'].includes(parent.tagName)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n        return NodeFilter.FILTER_ACCEPT;\n      }\n    }\n  );\n\n  const textNodes: Text[] = [];\n  let node;\n  while (node = walker.nextNode()) {\n    textNodes.push(node as Text);\n  }\n\n  // Search for IPs in text nodes\n  textNodes.forEach(textNode => {\n    const text = textNode.textContent || '';\n    const parent = textNode.parentElement;\n    \n    if (!parent) return;\n\n    for (const [type, pattern] of Object.entries(CONTENT_IP_PATTERNS)) {\n      let match;\n      pattern.lastIndex = 0; // Reset regex\n      \n      while ((match = pattern.exec(text)) !== null) {\n        const ip = match[0];\n        const index = match.index;\n        \n        // Get context around the IP\n        const start = Math.max(0, index - 30);\n        const end = Math.min(text.length, index + ip.length + 30);\n        const context = text.slice(start, end).trim();\n\n        // Check if IP is already detected\n        if (!newDetectedIPs.find(detected => detected.ip === ip)) {\n          newDetectedIPs.push({\n            ip,\n            type,\n            element: parent,\n            context\n          });\n\n          // Highlight the IP if enabled\n          if (CONFIG.highlightDetectedIPs) {\n            highlightIPInElement(parent, ip);\n          }\n        }\n      }\n    }\n  });\n\n  contentDetectedIPs = newDetectedIPs;\n  \n  if (contentDetectedIPs.length > 0) {\n    updateFloatingIndicator();\n    notifyBackgroundScript();\n  }\n}\n\n// Highlight detected IP in element\nfunction highlightIPInElement(element: HTMLElement, ip: string): void {\n  const text = element.textContent || '';\n  const index = text.indexOf(ip);\n  \n  if (index === -1) return;\n\n  try {\n    const range = document.createRange();\n    const walker = document.createTreeWalker(\n      element,\n      NodeFilter.SHOW_TEXT\n    );\n\n    let currentOffset = 0;\n    let textNode;\n    \n    while (textNode = walker.nextNode()) {\n      const nodeText = textNode.textContent || '';\n      const nodeLength = nodeText.length;\n      \n      if (currentOffset <= index && index < currentOffset + nodeLength) {\n        const startOffset = index - currentOffset;\n        const endOffset = startOffset + ip.length;\n        \n        range.setStart(textNode, startOffset);\n        range.setEnd(textNode, endOffset);\n        \n        // Create highlight span\n        const highlight = document.createElement('span');\n        highlight.className = 'ip-graph-highlight';\n        highlight.style.cssText = `\n          background: linear-gradient(135deg, #667eea, #764ba2);\n          color: white;\n          padding: 2px 4px;\n          border-radius: 3px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: all 0.2s ease;\n        `;\n        \n        highlight.title = `IP Address: ${ip}\\nClick to analyze`;\n        highlight.addEventListener('click', () => analyzeIP(ip));\n        highlight.addEventListener('mouseenter', () => {\n          highlight.style.transform = 'scale(1.05)';\n          highlight.style.boxShadow = '0 2px 8px rgba(102, 126, 234, 0.3)';\n        });\n        highlight.addEventListener('mouseleave', () => {\n          highlight.style.transform = 'scale(1)';\n          highlight.style.boxShadow = 'none';\n        });\n        \n        try {\n          range.surroundContents(highlight);\n        } catch (e) {\n          // If range spans multiple elements, use different approach\n          highlight.textContent = ip;\n          range.deleteContents();\n          range.insertNode(highlight);\n        }\n        \n        break;\n      }\n      \n      currentOffset += nodeLength;\n    }\n  } catch (error) {\n    console.warn('Failed to highlight IP:', error);\n  }\n}\n\n// Update floating indicator\nfunction updateFloatingIndicator(): void {\n  if (!CONFIG.showFloatingIndicator) return;\n\n  if (floatingIndicator) {\n    floatingIndicator.remove();\n  }\n\n  if (contentDetectedIPs.length === 0) return;\n\n  floatingIndicator = document.createElement('div');\n  floatingIndicator.id = 'ip-graph-indicator';\n  floatingIndicator.innerHTML = `\n    <div class=\"indicator-content\">\n      <div class=\"indicator-icon\">📊</div>\n      <div class=\"indicator-text\">\n        <div class=\"indicator-count\">${contentDetectedIPs.length}</div>\n        <div class=\"indicator-label\">IP${contentDetectedIPs.length > 1 ? 's' : ''} detected</div>\n      </div>\n      <div class=\"indicator-actions\">\n        <button class=\"indicator-btn analyze-all\" title=\"Analyze All\">🔍</button>\n        <button class=\"indicator-btn close-indicator\" title=\"Close\">✕</button>\n      </div>\n    </div>\n    <div class=\"indicator-dropdown\">\n      ${contentDetectedIPs.slice(0, 5).map((ip, index) => `\n        <div class=\"ip-item\" data-ip=\"${ip.ip}\">\n          <div class=\"ip-address\">${ip.ip.slice(0, 10)}...${ip.ip.slice(-8)}</div>\n          <div class=\"ip-type\">${ip.type}</div>\n          <div class=\"ip-context\">${ip.context.slice(0, 50)}...</div>\n        </div>\n      `).join('')}\n      ${contentDetectedIPs.length > 5 ? `<div class=\"ip-item more\">+${contentDetectedIPs.length - 5} more...</div>` : ''}\n    </div>\n  `;\n\n  // Add styles\n  floatingIndicator.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: white;\n    border-radius: 12px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);\n    z-index: 10000;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    min-width: 280px;\n    max-width: 350px;\n    border: 1px solid #e5e7eb;\n    animation: slideInRight 0.3s ease;\n  `;\n\n  // Add event listeners\n  setupIndicatorEventListeners();\n\n  document.body.appendChild(floatingIndicator);\n\n  // Auto-hide after 10 seconds\n  setTimeout(() => {\n    if (floatingIndicator && floatingIndicator.parentNode) {\n      floatingIndicator.style.animation = 'slideOutRight 0.3s ease';\n      setTimeout(() => {\n        if (floatingIndicator && floatingIndicator.parentNode) {\n          floatingIndicator.remove();\n        }\n      }, 300);\n    }\n  }, 10000);\n}\n\n// Setup indicator event listeners\nfunction setupIndicatorEventListeners(): void {\n  if (!floatingIndicator) return;\n\n  // Toggle dropdown\n  const indicatorContent = floatingIndicator.querySelector('.indicator-content');\n  const dropdown = floatingIndicator.querySelector('.indicator-dropdown');\n  \n  indicatorContent?.addEventListener('click', (e) => {\n    const target = e.target as HTMLElement;\n    if (target.classList.contains('indicator-btn')) return;\n    \n    dropdown?.classList.toggle('show');\n  });\n\n  // Analyze all button\n  const analyzeAllBtn = floatingIndicator.querySelector('.analyze-all');\n  analyzeAllBtn?.addEventListener('click', (e) => {\n    e.stopPropagation();\n    analyzeAllDetectedIPs();\n  });\n\n  // Close button\n  const closeBtn = floatingIndicator.querySelector('.close-indicator');\n  closeBtn?.addEventListener('click', (e) => {\n    e.stopPropagation();\n    floatingIndicator?.remove();\n  });\n\n  // IP item clicks\n  const ipItems = floatingIndicator.querySelectorAll('.ip-item[data-ip]');\n  ipItems.forEach(item => {\n    item.addEventListener('click', () => {\n      const ip = item.getAttribute('data-ip');\n      if (ip) {\n        analyzeIP(ip);\n      }\n    });\n  });\n}\n\n// Setup mutation observer for dynamic content\nfunction setupMutationObserver(): void {\n  const observer = new MutationObserver((mutations) => {\n    let shouldCheck = false;\n    \n    mutations.forEach((mutation) => {\n      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n        // Check if added nodes contain text\n        for (const node of mutation.addedNodes) {\n          if (node.nodeType === Node.TEXT_NODE || \n              (node.nodeType === Node.ELEMENT_NODE && (node as Element).textContent)) {\n            shouldCheck = true;\n            break;\n          }\n        }\n      }\n    });\n    \n    if (shouldCheck) {\n      // Debounce the check\n      if (debounceTimer) {\n        clearTimeout(debounceTimer);\n      }\n      debounceTimer = window.setTimeout(() => {\n        detectIPsOnPage();\n      }, CONFIG.debounceDelay);\n    }\n  });\n\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  });\n}\n\n// Analyze single IP\nfunction analyzeIP(ip: string): void {\n  chrome.runtime.sendMessage({\n    action: 'analyzeIP',\n    ipId: ip\n  }, (response) => {\n    if (response?.success) {\n      showNotification(`Analyzing IP: ${ip.slice(0, 10)}...`);\n    }\n  });\n}\n\n// Analyze all detected IPs\nfunction analyzeAllDetectedIPs(): void {\n  if (contentDetectedIPs.length === 0) return;\n\n  // For now, analyze the first IP\n  const firstIP = contentDetectedIPs[0];\n  analyzeIP(firstIP.ip);\n  \n  showNotification(`Analyzing ${contentDetectedIPs.length} detected IP${contentDetectedIPs.length > 1 ? 's' : ''}...`);\n}\n\n// Notify background script about detected IPs\nfunction notifyBackgroundScript(): void {\n  chrome.runtime.sendMessage({\n    action: 'ipsDetected',\n    ips: contentDetectedIPs.map(ip => ({\n      ip: ip.ip,\n      type: ip.type,\n      context: ip.context\n    })),\n    url: window.location.href,\n    title: document.title\n  });\n}\n\n// Setup message listener\nfunction setupMessageListener(): void {\n  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    switch (request.action) {\n      case 'getDetectedIPs':\n        sendResponse({\n          ips: contentDetectedIPs,\n          url: window.location.href,\n          title: document.title\n        });\n        break;\n        \n      case 'highlightIP':\n        if (request.ip) {\n          const detected = contentDetectedIPs.find(d => d.ip === request.ip);\n          if (detected) {\n            detected.element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            detected.element.style.animation = 'pulse 2s ease-in-out';\n          }\n        }\n        break;\n        \n      case 'clearHighlights':\n        clearAllHighlights();\n        break;\n    }\n    \n    return true;\n  });\n}\n\n// Clear all highlights\nfunction clearAllHighlights(): void {\n  const highlights = document.querySelectorAll('.ip-graph-highlight');\n  highlights.forEach(highlight => {\n    const parent = highlight.parentNode;\n    if (parent) {\n      parent.replaceChild(document.createTextNode(highlight.textContent || ''), highlight);\n      parent.normalize();\n    }\n  });\n}\n\n// Show notification (renamed to avoid conflict)\nfunction showNotification(message: string): void {\n  const notification = document.createElement('div');\n  notification.style.cssText = `\n    position: fixed;\n    top: 80px;\n    right: 20px;\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    color: white;\n    padding: 12px 20px;\n    border-radius: 8px;\n    font-size: 14px;\n    font-weight: 600;\n    z-index: 10001;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n    animation: slideInRight 0.3s ease;\n    max-width: 300px;\n  `;\n  \n  notification.textContent = message;\n  document.body.appendChild(notification);\n  \n  setTimeout(() => {\n    notification.style.animation = 'slideOutRight 0.3s ease';\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.remove();\n      }\n    }, 300);\n  }, 3000);\n}\n\n// Add CSS animations\nfunction addStyles(): void {\n  if (document.getElementById('ip-graph-content-styles')) return;\n\n  const style = document.createElement('style');\n  style.id = 'ip-graph-content-styles';\n  style.textContent = `\n    @keyframes slideInRight {\n      from {\n        transform: translateX(100%);\n        opacity: 0;\n      }\n      to {\n        transform: translateX(0);\n        opacity: 1;\n      }\n    }\n\n    @keyframes slideOutRight {\n      from {\n        transform: translateX(0);\n        opacity: 1;\n      }\n      to {\n        transform: translateX(100%);\n        opacity: 0;\n      }\n    }\n\n    @keyframes pulse {\n      0%, 100% { transform: scale(1); }\n      50% { transform: scale(1.05); }\n    }\n\n    #ip-graph-indicator .indicator-content {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      padding: 15px;\n      cursor: pointer;\n      transition: background 0.2s ease;\n    }\n\n    #ip-graph-indicator .indicator-content:hover {\n      background: #f8f9fa;\n    }\n\n    #ip-graph-indicator .indicator-icon {\n      font-size: 20px;\n    }\n\n    #ip-graph-indicator .indicator-text {\n      flex: 1;\n    }\n\n    #ip-graph-indicator .indicator-count {\n      font-size: 18px;\n      font-weight: bold;\n      color: #667eea;\n    }\n\n    #ip-graph-indicator .indicator-label {\n      font-size: 12px;\n      color: #666;\n    }\n\n    #ip-graph-indicator .indicator-actions {\n      display: flex;\n      gap: 8px;\n    }\n\n    #ip-graph-indicator .indicator-btn {\n      background: #f3f4f6;\n      border: none;\n      border-radius: 6px;\n      padding: 6px 8px;\n      cursor: pointer;\n      font-size: 12px;\n      transition: all 0.2s ease;\n    }\n\n    #ip-graph-indicator .indicator-btn:hover {\n      background: #e5e7eb;\n      transform: scale(1.05);\n    }\n\n    #ip-graph-indicator .indicator-dropdown {\n      display: none;\n      border-top: 1px solid #e5e7eb;\n      max-height: 200px;\n      overflow-y: auto;\n    }\n\n    #ip-graph-indicator .indicator-dropdown.show {\n      display: block;\n    }\n\n    #ip-graph-indicator .ip-item {\n      padding: 12px 15px;\n      border-bottom: 1px solid #f3f4f6;\n      cursor: pointer;\n      transition: background 0.2s ease;\n    }\n\n    #ip-graph-indicator .ip-item:hover {\n      background: #f8f9fa;\n    }\n\n    #ip-graph-indicator .ip-item:last-child {\n      border-bottom: none;\n    }\n\n    #ip-graph-indicator .ip-address {\n      font-family: monospace;\n      font-size: 12px;\n      font-weight: 600;\n      color: #333;\n      margin-bottom: 4px;\n    }\n\n    #ip-graph-indicator .ip-type {\n      font-size: 10px;\n      color: #667eea;\n      font-weight: 600;\n      text-transform: uppercase;\n      margin-bottom: 4px;\n    }\n\n    #ip-graph-indicator .ip-context {\n      font-size: 11px;\n      color: #666;\n      line-height: 1.3;\n    }\n\n    #ip-graph-indicator .ip-item.more {\n      text-align: center;\n      color: #667eea;\n      font-weight: 600;\n      font-size: 12px;\n    }\n  `;\n  document.head.appendChild(style);\n}\n\n// Initialize when page loads\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => {\n    addStyles();\n    initialize();\n  });\n} else {\n  addStyles();\n  initialize();\n}"],"names":["console","log","CONTENT_IP_PATTERNS","ethereum","ensName","storyIP","contentDetectedIPs","floatingIndicator","debounceTimer","initialize","detectIPsOnPage","MutationObserver","mutations","shouldCheck","forEach","mutation","type","addedNodes","length","node","nodeType","Node","TEXT_NODE","ELEMENT_NODE","textContent","clearTimeout","window","setTimeout","observe","document","body","childList","subtree","chrome","runtime","onMessage","addListener","request","sender","sendResponse","action","ips","url","location","href","title","ip","detected","find","d","element","scrollIntoView","behavior","block","style","animation","querySelectorAll","highlight","parent","parentNode","replaceChild","createTextNode","normalize","newDetectedIPs","walker","createTreeWalker","NodeFilter","SHOW_TEXT","acceptNode","parentElement","includes","tagName","FILTER_REJECT","FILTER_ACCEPT","textNodes","nextNode","push","textNode","text","pattern","Object","entries","match","lastIndex","exec","index","start","Math","max","end","min","context","slice","trim","highlightIPInElement","remove","createElement","id","innerHTML","map","join","cssText","indicatorContent","querySelector","dropdown","addEventListener","e","target","classList","contains","toggle","analyzeAllBtn","stopPropagation","analyzeIP","showNotification","closeBtn","item","getAttribute","setupIndicatorEventListeners","appendChild","sendMessage","indexOf","range","createRange","currentOffset","nodeLength","startOffset","endOffset","setStart","setEnd","className","transform","boxShadow","surroundContents","deleteContents","insertNode","error","warn","ipId","response","success","message","notification","addStyles","getElementById","head","readyState"],"sourceRoot":""}