{"version":3,"file":"1269.js","mappings":"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","sources":["webpack://ip-graph-extension/./node_modules/@noble/hashes/esm/hmac.js","webpack://ip-graph-extension/./node_modules/viem/node_modules/@noble/curves/esm/utils.js","webpack://ip-graph-extension/./node_modules/viem/node_modules/@noble/curves/esm/abstract/modular.js","webpack://ip-graph-extension/./node_modules/viem/node_modules/@noble/curves/esm/abstract/curve.js","webpack://ip-graph-extension/./node_modules/viem/node_modules/@noble/curves/esm/abstract/weierstrass.js","webpack://ip-graph-extension/./node_modules/viem/node_modules/@noble/curves/esm/secp256k1.js","webpack://ip-graph-extension/./node_modules/viem/node_modules/@noble/curves/esm/_shortw_utils.js"],"sourcesContent":["/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes } from \"./utils.js\";\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        clean(pad);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { abytes as abytes_, bytesToHex as bytesToHex_, concatBytes as concatBytes_, hexToBytes as hexToBytes_, isBytes as isBytes_, } from '@noble/hashes/utils.js';\nexport { abytes, anumber, bytesToHex, bytesToUtf8, concatBytes, hexToBytes, isBytes, randomBytes, utf8ToBytes, } from '@noble/hashes/utils.js';\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex_(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes_(bytes);\n    return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes_(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes_(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes_(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_1n << BigInt(n)) - _1n;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    const u8n = (len) => new Uint8Array(len); // creates Uint8Array\n    const u8of = (byte) => Uint8Array.of(byte); // another shortcut\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n(0)) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes_(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes_(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\nexport function isHash(val) {\n    return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nexport function _validateObject(object, fields, optFields = {}) {\n    if (!object || typeof object !== 'object')\n        throw new Error('expected valid options object');\n    function checkField(fieldName, expectedType, isOpt) {\n        const val = object[fieldName];\n        if (isOpt && val === undefined)\n            return;\n        const current = typeof val;\n        if (current !== expectedType || val === null)\n            throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n    }\n    Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n    Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","/**\n * Utils for modular division and fields.\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { _validateObject, anumber, bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, } from \"../utils.js\";\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5);\nconst _8n = /* @__PURE__ */ BigInt(8);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    return FpPow(Field(modulo), num, power);\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4(Fp, n) {\n    const p1div4 = (Fp.ORDER + _1n) / _4n;\n    const root = Fp.pow(n, p1div4);\n    // Throw if root^2 != n\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\nfunction sqrt5mod8(Fp, n) {\n    const p5div8 = (Fp.ORDER - _5n) / _8n;\n    const n2 = Fp.mul(n, _2n);\n    const v = Fp.pow(n2, p5div8);\n    const nv = Fp.mul(n, v);\n    const i = Fp.mul(Fp.mul(nv, _2n), v);\n    const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n    return root;\n}\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Initialization (precomputation).\n    // Caching initialization could boost perf by 7%.\n    if (P < BigInt(3))\n        throw new Error('sqrt is not defined for small field');\n    // Factor P - 1 = Q * 2^S, where Q is odd\n    let Q = P - _1n;\n    let S = 0;\n    while (Q % _2n === _0n) {\n        Q /= _2n;\n        S++;\n    }\n    // Find the first quadratic non-residue Z >= 2\n    let Z = _2n;\n    const _Fp = Field(P);\n    while (FpLegendre(_Fp, Z) === 1) {\n        // Basic primality test for P. After x iterations, chance of\n        // not finding quadratic non-residue is 2^x, so 2^1000.\n        if (Z++ > 1000)\n            throw new Error('Cannot find square root: probably non-prime P');\n    }\n    // Fast-path; usually done before Z, but we do \"primality test\".\n    if (S === 1)\n        return sqrt3mod4;\n    // Slow-path\n    // TODO: test on Fp2 and others\n    let cc = _Fp.pow(Z, Q); // c = z^Q\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        if (Fp.is0(n))\n            return n;\n        // Check if n is a quadratic residue using Legendre symbol\n        if (FpLegendre(Fp, n) !== 1)\n            throw new Error('Cannot find square root');\n        // Initialize variables for the main loop\n        let M = S;\n        let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n        let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n        let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n        // Main loop\n        // while t != 1\n        while (!Fp.eql(t, Fp.ONE)) {\n            if (Fp.is0(t))\n                return Fp.ZERO; // if t=0 return R=0\n            let i = 1;\n            // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n            let t_tmp = Fp.sqr(t); // t^(2^1)\n            while (!Fp.eql(t_tmp, Fp.ONE)) {\n                i++;\n                t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n                if (i === M)\n                    throw new Error('Cannot find square root');\n            }\n            // Calculate the exponent for b: 2^(M - i - 1)\n            const exponent = _1n << BigInt(M - i - 1); // bigint is important\n            const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n            // Update variables\n            M = i;\n            c = Fp.sqr(b); // c = b^2\n            t = Fp.mul(t, c); // t = (t * b^2)\n            R = Fp.mul(R, b); // R = R*b\n        }\n        return R;\n    };\n}\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n    if (P % _4n === _3n)\n        return sqrt3mod4;\n    // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n    if (P % _8n === _5n)\n        return sqrt5mod8;\n    // P ≡ 9 (mod 16) not implemented, see above\n    // Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'number',\n        BITS: 'number',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    _validateObject(field, opts);\n    // const max = 16384;\n    // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n    // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n    return field;\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(Fp, num, power) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return Fp.ONE;\n    if (power === _1n)\n        return num;\n    let p = Fp.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = Fp.mul(p, d);\n        d = Fp.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch(Fp, nums, passZero = false) {\n    const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n    // Walk from first to last, multiply them by each other MOD p\n    const multipliedAcc = nums.reduce((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = acc;\n        return Fp.mul(acc, num);\n    }, Fp.ONE);\n    // Invert last element\n    const invertedAcc = Fp.inv(multipliedAcc);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = Fp.mul(acc, inverted[i]);\n        return Fp.mul(acc, num);\n    }, invertedAcc);\n    return inverted;\n}\n// TODO: remove\nexport function FpDiv(Fp, lhs, rhs) {\n    return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(Fp, n) {\n    // We can use 3rd argument as optional cache of this value\n    // but seems unneeded for now. The operation is very fast.\n    const p1mod2 = (Fp.ORDER - _1n) / _2n;\n    const powered = Fp.pow(n, p1mod2);\n    const yes = Fp.eql(powered, Fp.ONE);\n    const zero = Fp.eql(powered, Fp.ZERO);\n    const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n    if (!yes && !zero && !no)\n        throw new Error('invalid Legendre symbol result');\n    return yes ? 1 : zero ? 0 : -1;\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(Fp, n) {\n    const l = FpLegendre(Fp, n);\n    return l === 1;\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    if (nBitLength !== undefined)\n        anumber(nBitLength);\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Creates a finite field. Major performance optimizations:\n * * 1. Denormalized operations like mulN instead of mul.\n * * 2. Identical object shape: never add or remove keys.\n * * 3. `Object.freeze`.\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n *\n * Note about field properties:\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n *\n * @param ORDER field order, probably prime, or could be composite\n * @param bitLen how many bits the field consumes\n * @param isLE (default: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLenOrOpts, isLE = false, opts = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    let _nbitLength = undefined;\n    let _sqrt = undefined;\n    if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n        if (opts.sqrt || isLE)\n            throw new Error('cannot specify opts in two arguments');\n        const _opts = bitLenOrOpts;\n        if (_opts.BITS)\n            _nbitLength = _opts.BITS;\n        if (_opts.sqrt)\n            _sqrt = _opts.sqrt;\n        if (typeof _opts.isLE === 'boolean')\n            isLE = _opts.isLE;\n    }\n    else {\n        if (typeof bitLenOrOpts === 'number')\n            _nbitLength = bitLenOrOpts;\n        if (opts.sqrt)\n            _sqrt = opts.sqrt;\n    }\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        // is valid and invertible\n        isValidNot0: (num) => !f.is0(num) && f.isValid(num),\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: _sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n        // TODO: we don't need it here, move out to separate fn\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // We can't move this out because Fp6, Fp12 implement it\n        // and it's unclear what to return in there.\n        cmov: (a, b, c) => (c ? b : a),\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitLen, bitMask, validateObject } from \"../utils.js\";\nimport { Field, FpInvertBatch, nLength, validateField } from \"./modular.js\";\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nexport function negateCt(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\n/**\n * Takes a bunch of Projective Points but executes only one\n * inversion on all of them. Inversion is very slow operation,\n * so this improves performance massively.\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\n */\nexport function normalizeZ(c, property, points) {\n    const getz = property === 'pz' ? (p) => p.pz : (p) => p.ez;\n    const toInv = FpInvertBatch(c.Fp, points.map(getz));\n    // @ts-ignore\n    const affined = points.map((p, i) => p.toAffine(toInv[i]));\n    return affined.map(c.fromAffine);\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, scalarBits) {\n    validateW(W, scalarBits);\n    const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n    const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n    const maxNumber = 2 ** W; // W=8 256\n    const mask = bitMask(W); // W=8 255 == mask 0b11111111\n    const shiftBy = BigInt(W); // W=8 8\n    return { windows, windowSize, mask, maxNumber, shiftBy };\n}\nfunction calcOffsets(n, window, wOpts) {\n    const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n    let wbits = Number(n & mask); // extract W bits.\n    let nextN = n >> shiftBy; // shift number by W bits.\n    // What actually happens here:\n    // const highestBit = Number(mask ^ (mask >> 1n));\n    // let wbits2 = wbits - 1; // skip zero\n    // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n    // split if bits > max: +224 => 256-32\n    if (wbits > windowSize) {\n        // we skip zero, which means instead of `>= size-1`, we do `> size`\n        wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n        nextN += _1n; // +256 (carry)\n    }\n    const offsetStart = window * windowSize;\n    const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n    const isZero = wbits === 0; // is current window slice a 0?\n    const isNeg = wbits < 0; // is current window slice negative?\n    const isNegF = window % 2 !== 0; // fake random statement for noise\n    const offsetF = offsetStart; // fake offset for noise\n    return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap();\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\nfunction assert0(n) {\n    if (n !== _0n)\n        throw new Error('invalid wNAF');\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate: negateCt,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // i=1, bc we skip 0\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // Smaller version:\n            // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n            // TODO: check the scalar is less than group order?\n            // wNAF behavior is undefined otherwise. But have to carefully remove\n            // other checks before wNAF. ORDER == bits here.\n            // Accumulators\n            let p = c.ZERO;\n            let f = c.BASE;\n            // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n            // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n            // there is negate now: it is possible that negated element from low value\n            // would be the same as high element, which will create carry into next window.\n            // It's not obvious how this can fail, but still worth investigating later.\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n                const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // bits are 0: add garbage to fake point\n                    // Important part for const-time getPublicKey: add random \"noise\" point to f.\n                    f = f.add(negateCt(isNegF, precomputes[offsetF]));\n                }\n                else {\n                    // bits are 1: add to result point\n                    p = p.add(negateCt(isNeg, precomputes[offset]));\n                }\n            }\n            assert0(n);\n            // Return both real and fake points: JIT won't eliminate f.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const wo = calcWOpts(W, bits);\n            for (let window = 0; window < wo.windows; window++) {\n                if (n === _0n)\n                    break; // Early-exit, skip 0 value\n                const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // Window bits are 0: skip processing.\n                    // Move to next window.\n                    continue;\n                }\n                else {\n                    const item = precomputes[offset];\n                    acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n                }\n            }\n            assert0(n);\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    // Doing transform outside of if brings 15% perf hit\n                    if (typeof transform === 'function')\n                        comp = transform(comp);\n                    pointPrecomputes.set(P, comp);\n                }\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Endomorphism-specific multiplication for Koblitz curves.\n * Cost: 128 dbl, 0-256 adds.\n */\nexport function mulEndoUnsafe(c, point, k1, k2) {\n    let acc = point;\n    let p1 = c.ZERO;\n    let p2 = c.ZERO;\n    while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n)\n            p1 = p1.add(acc);\n        if (k2 & _1n)\n            p2 = p2.add(acc);\n        acc = acc.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n    }\n    return { p1, p2 };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    const plength = points.length;\n    const slength = scalars.length;\n    if (plength !== slength)\n        throw new Error('arrays of points and scalars must have equal length');\n    // if (plength === 0) throw new Error('array must be of length >= 2');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(plength));\n    let windowSize = 1; // bits\n    if (wbits > 12)\n        windowSize = wbits - 3;\n    else if (wbits > 4)\n        windowSize = wbits - 2;\n    else if (wbits > 0)\n        windowSize = 2;\n    const MASK = bitMask(windowSize);\n    const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < slength; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & MASK);\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = bitMask(windowSize);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\n// TODO: remove\n/** @deprecated */\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\nfunction createField(order, field) {\n    if (field) {\n        if (field.ORDER !== order)\n            throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n        validateField(field);\n        return field;\n    }\n    else {\n        return Field(order);\n    }\n}\n/** Validates CURVE opts and creates fields */\nexport function _createCurveFields(type, CURVE, curveOpts = {}) {\n    if (!CURVE || typeof CURVE !== 'object')\n        throw new Error(`expected valid ${type} CURVE object`);\n    for (const p of ['p', 'n', 'h']) {\n        const val = CURVE[p];\n        if (!(typeof val === 'bigint' && val > _0n))\n            throw new Error(`CURVE.${p} must be positive bigint`);\n    }\n    const Fp = createField(CURVE.p, curveOpts.Fp);\n    const Fn = createField(CURVE.n, curveOpts.Fn);\n    const _b = type === 'weierstrass' ? 'b' : 'd';\n    const params = ['Gx', 'Gy', 'a', _b];\n    for (const p of params) {\n        // @ts-ignore\n        if (!Fp.isValid(CURVE[p]))\n            throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n    }\n    return { Fp, Fn };\n}\n//# sourceMappingURL=curve.js.map","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac.js';\nimport { _validateObject, abool, abytes, aInRange, bitMask, bytesToHex, bytesToNumberBE, concatBytes, createHmacDrbg, ensureBytes, hexToBytes, inRange, isBytes, memoized, numberToHexUnpadded, randomBytes, } from \"../utils.js\";\nimport { _createCurveFields, mulEndoUnsafe, negateCt, normalizeZ, pippenger, wNAF, } from \"./curve.js\";\nimport { Field, FpInvertBatch, getMinHashLength, mapHashToField, validateField, } from \"./modular.js\";\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return bytesToNumberBE(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = ensureBytes('signature', hex);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n// TODO: remove\nexport function _legacyHelperEquat(Fp, a, b) {\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x² * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n    }\n    return weierstrassEquation;\n}\nexport function _legacyHelperNormPriv(Fn, allowedPrivateKeyLengths, wrapPrivateKey) {\n    const { BYTES: expected } = Fn;\n    // Validates if priv key is valid and converts it to bigint.\n    function normPrivateKeyToScalar(key) {\n        let num;\n        if (typeof key === 'bigint') {\n            num = key;\n        }\n        else {\n            let bytes = ensureBytes('private key', key);\n            if (allowedPrivateKeyLengths) {\n                if (!allowedPrivateKeyLengths.includes(bytes.length * 2))\n                    throw new Error('invalid private key');\n                const padded = new Uint8Array(expected);\n                padded.set(bytes, padded.length - bytes.length);\n                bytes = padded;\n            }\n            try {\n                num = Fn.fromBytes(bytes);\n            }\n            catch (error) {\n                throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n            }\n        }\n        if (wrapPrivateKey)\n            num = Fn.create(num); // disabled by default, enabled for BLS\n        if (!Fn.isValidNot0(num))\n            throw new Error('invalid private key: out of range [1..N-1]');\n        return num;\n    }\n    return normPrivateKeyToScalar;\n}\nexport function weierstrassN(CURVE, curveOpts = {}) {\n    const { Fp, Fn } = _createCurveFields('weierstrass', CURVE, curveOpts);\n    const { h: cofactor, n: CURVE_ORDER } = CURVE;\n    _validateObject(curveOpts, {}, {\n        allowInfinityPoint: 'boolean',\n        clearCofactor: 'function',\n        isTorsionFree: 'function',\n        fromBytes: 'function',\n        toBytes: 'function',\n        endo: 'object',\n        wrapPrivateKey: 'boolean',\n    });\n    const { endo } = curveOpts;\n    if (endo) {\n        // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n        if (!Fp.is0(CURVE.a) ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n        }\n    }\n    function assertCompressionIsSupported() {\n        if (!Fp.isOdd)\n            throw new Error('compression is not supported: Field does not have .isOdd()');\n    }\n    // Implements IEEE P1363 point encoding\n    function pointToBytes(_c, point, isCompressed) {\n        const { x, y } = point.toAffine();\n        const bx = Fp.toBytes(x);\n        abool('isCompressed', isCompressed);\n        if (isCompressed) {\n            assertCompressionIsSupported();\n            const hasEvenY = !Fp.isOdd(y);\n            return concatBytes(pprefix(hasEvenY), bx);\n        }\n        else {\n            return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n        }\n    }\n    function pointFromBytes(bytes) {\n        abytes(bytes);\n        const L = Fp.BYTES;\n        const LC = L + 1; // length compressed, e.g. 33 for 32-byte field\n        const LU = 2 * L + 1; // length uncompressed, e.g. 65 for 32-byte field\n        const length = bytes.length;\n        const head = bytes[0];\n        const tail = bytes.subarray(1);\n        // No actual validation is done here: use .assertValidity()\n        if (length === LC && (head === 0x02 || head === 0x03)) {\n            const x = Fp.fromBytes(tail);\n            if (!Fp.isValid(x))\n                throw new Error('bad point: is not on curve, wrong x');\n            const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n            let y;\n            try {\n                y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n            }\n            catch (sqrtError) {\n                const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                throw new Error('bad point: is not on curve, sqrt error' + err);\n            }\n            assertCompressionIsSupported();\n            const isYOdd = Fp.isOdd(y); // (y & _1n) === _1n;\n            const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n            if (isHeadOdd !== isYOdd)\n                y = Fp.neg(y);\n            return { x, y };\n        }\n        else if (length === LU && head === 0x04) {\n            // TODO: more checks\n            const x = Fp.fromBytes(tail.subarray(L * 0, L * 1));\n            const y = Fp.fromBytes(tail.subarray(L * 1, L * 2));\n            if (!isValidXY(x, y))\n                throw new Error('bad point: is not on curve');\n            return { x, y };\n        }\n        else {\n            throw new Error(`bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`);\n        }\n    }\n    const toBytes = curveOpts.toBytes || pointToBytes;\n    const fromBytes = curveOpts.fromBytes || pointFromBytes;\n    const weierstrassEquation = _legacyHelperEquat(Fp, CURVE.a, CURVE.b);\n    // TODO: move top-level\n    /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n    function isValidXY(x, y) {\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        return Fp.eql(left, right);\n    }\n    // Validate whether the passed curve params are valid.\n    // Test 1: equation y² = x³ + ax + b should work for generator point.\n    if (!isValidXY(CURVE.Gx, CURVE.Gy))\n        throw new Error('bad curve params: generator point');\n    // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n    // Guarantees curve is genus-1, smooth (non-singular).\n    const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n    const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n    if (Fp.is0(Fp.add(_4a3, _27b2)))\n        throw new Error('bad curve params: a or b');\n    /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n    function acoord(title, n, banZero = false) {\n        if (!Fp.isValid(n) || (banZero && Fp.is0(n)))\n            throw new Error(`bad point coordinate ${title}`);\n        return n;\n    }\n    function aprjpoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (curveOpts.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not field elements');\n        if (!isValidXY(x, y))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {\n        k2p = new Point(Fp.mul(k2p.px, endoBeta), k2p.py, k2p.pz);\n        k1p = negateCt(k1neg, k1p);\n        k2p = negateCt(k2neg, k2p);\n        return k1p.add(k2p);\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n     * Default Point works in 2d / affine coordinates: (x, y).\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n        constructor(px, py, pz) {\n            this.px = acoord('x', px);\n            this.py = acoord('y', py, true);\n            this.pz = acoord('z', pz);\n            Object.freeze(this);\n        }\n        /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n            if (Fp.is0(x) && Fp.is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static normalizeZ(points) {\n            return normalizeZ(Point, 'pz', points);\n        }\n        static fromBytes(bytes) {\n            abytes(bytes);\n            return Point.fromHex(bytes);\n        }\n        /** Converts hash string or Uint8Array to Point. */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        /** Multiplies generator point by privateKey. */\n        static fromPrivateKey(privateKey) {\n            const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, curveOpts.allowedPrivateKeyLengths, curveOpts.wrapPrivateKey);\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        /** Multiscalar Multiplication */\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        /**\n         *\n         * @param windowSize\n         * @param isLazy true will defer table computation until the first multiplication\n         * @returns\n         */\n        precompute(windowSize = 8, isLazy = true) {\n            wnaf.setWindowSize(this, windowSize);\n            if (!isLazy)\n                this.multiply(_3n); // random number\n            return this;\n        }\n        /** \"Private method\", don't use it directly */\n        _setWindowSize(windowSize) {\n            this.precompute(windowSize);\n        }\n        // TODO: return `this`\n        /** A point on curve is valid if it conforms to equation. */\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (!Fp.isOdd)\n                throw new Error(\"Field doesn't support isOdd\");\n            return !Fp.isOdd(y);\n        }\n        /** Compare one point to another. */\n        equals(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo } = curveOpts;\n            if (!Fn.isValidNot0(scalar))\n                throw new Error('invalid scalar: out of range'); // 0 is invalid\n            let point, fake; // Fake point is used to const-time mult\n            const mul = (n) => wnaf.wNAFCached(this, n, Point.normalizeZ);\n            /** See docs for {@link EndomorphismOpts} */\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                const { p: k1p, f: k1f } = mul(k1);\n                const { p: k2p, f: k2f } = mul(k2);\n                fake = k1f.add(k2f);\n                point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n            }\n            else {\n                const { p, f } = mul(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo } = curveOpts;\n            const p = this;\n            if (!Fn.isValid(sc))\n                throw new Error('invalid scalar: out of range'); // 0 is valid\n            if (sc === _0n || p.is0())\n                return Point.ZERO;\n            if (sc === _1n)\n                return p; // fast-path\n            if (wnaf.hasPrecomputes(this))\n                return this.multiply(sc);\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n                // `wNAFCachedUnsafe` is 30% slower\n                const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2);\n                return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n            }\n            else {\n                return wnaf.wNAFCachedUnsafe(p, sc);\n            }\n        }\n        multiplyAndAddUnsafe(Q, a, b) {\n            const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n            return sum.is0() ? undefined : sum;\n        }\n        /**\n         * Converts Projective point to affine (x, y) coordinates.\n         * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n         */\n        toAffine(invertedZ) {\n            return toAffineMemo(this, invertedZ);\n        }\n        /**\n         * Checks whether Point is free of torsion elements (is in prime subgroup).\n         * Always torsion-free for cofactor=1 curves.\n         */\n        isTorsionFree() {\n            const { isTorsionFree } = curveOpts;\n            if (cofactor === _1n)\n                return true;\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n        }\n        clearCofactor() {\n            const { clearCofactor } = curveOpts;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(cofactor);\n        }\n        toBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        /** @deprecated use `toBytes` */\n        toRawBytes(isCompressed = true) {\n            return this.toBytes(isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return bytesToHex(this.toBytes(isCompressed));\n        }\n        toString() {\n            return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n        }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // fields\n    Point.Fp = Fp;\n    Point.Fn = Fn;\n    const bits = Fn.BITS;\n    const wnaf = wNAF(Point, curveOpts.endo ? Math.ceil(bits / 2) : bits);\n    return Point;\n}\n// _legacyWeierstrass\n/** @deprecated use `weierstrassN` */\nexport function weierstrassPoints(c) {\n    const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    return _weierstrass_new_output_to_legacy(c, Point);\n}\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY) {\n    return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\nexport function ecdsa(Point, ecdsaOpts, curveOpts = {}) {\n    _validateObject(ecdsaOpts, { hash: 'function' }, {\n        hmac: 'function',\n        lowS: 'boolean',\n        randomBytes: 'function',\n        bits2int: 'function',\n        bits2int_modN: 'function',\n    });\n    const randomBytes_ = ecdsaOpts.randomBytes || randomBytes;\n    const hmac_ = ecdsaOpts.hmac ||\n        ((key, ...msgs) => hmac(ecdsaOpts.hash, key, concatBytes(...msgs)));\n    const { Fp, Fn } = Point;\n    const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? Fn.neg(s) : s;\n    }\n    function aValidRS(title, num) {\n        if (!Fn.isValidNot0(num))\n            throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);\n    }\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            aValidRS('r', r); // r in [1..N-1]\n            aValidRS('s', s); // s in [1..N-1]\n            this.r = r;\n            this.s = s;\n            if (recovery != null)\n                this.recovery = recovery;\n            Object.freeze(this);\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const L = Fn.BYTES;\n            const b = ensureBytes('compactSignature', hex, L * 2);\n            return new Signature(Fn.fromBytes(b.subarray(0, L)), Fn.fromBytes(b.subarray(L, L * 2)));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        /**\n         * @todo remove\n         * @deprecated\n         */\n        assertValidity() { }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        // ProjPointType<bigint>\n        recoverPublicKey(msgHash) {\n            const FIELD_ORDER = Fp.ORDER;\n            const { r, s, recovery: rec } = this;\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            // ECDSA recovery is hard for cofactor > 1 curves.\n            // In sign, `r = q.x mod n`, and here we recover q.x from r.\n            // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n            // However, for cofactor>1, r+n may not get q.x:\n            // r+n*i would need to be done instead where i is unknown.\n            // To easily get i, we either need to:\n            // a. increase amount of valid recid values (4, 5...); OR\n            // b. prohibit non-prime-order signatures (recid > 1).\n            const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n            if (hasCofactor && rec > 1)\n                throw new Error('recovery id is ambiguous for h>1 curve');\n            const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n            if (!Fp.isValid(radj))\n                throw new Error('recovery id 2 or 3 invalid');\n            const x = Fp.toBytes(radj);\n            const R = Point.fromHex(concatBytes(pprefix((rec & 1) === 0), x));\n            const ir = Fn.inv(radj); // r^-1\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            const u1 = Fn.create(-h * ir); // -hr^-1\n            const u2 = Fn.create(s * ir); // sr^-1\n            // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n            const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n            if (Q.is0())\n                throw new Error('point at infinify');\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n        }\n        toBytes(format) {\n            if (format === 'compact')\n                return concatBytes(Fn.toBytes(this.r), Fn.toBytes(this.s));\n            if (format === 'der')\n                return hexToBytes(DER.hexFromSig(this));\n            throw new Error('invalid format');\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return this.toBytes('der');\n        }\n        toDERHex() {\n            return bytesToHex(this.toBytes('der'));\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return this.toBytes('compact');\n        }\n        toCompactHex() {\n            return bytesToHex(this.toBytes('compact'));\n        }\n    }\n    const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, curveOpts.allowedPrivateKeyLengths, curveOpts.wrapPrivateKey);\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const n = CURVE_ORDER;\n            return mapHashToField(randomBytes_(getMinHashLength(n)), n);\n        },\n        precompute(windowSize = 8, point = Point.BASE) {\n            return point.precompute(windowSize, false);\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        if (typeof item === 'bigint')\n            return false;\n        if (item instanceof Point)\n            return true;\n        const arr = ensureBytes('key', item);\n        const length = arr.length;\n        const L = Fp.BYTES;\n        const LC = L + 1; // e.g. 33 for 32\n        const LU = 2 * L + 1; // e.g. 65 for 32\n        if (curveOpts.allowedPrivateKeyLengths || Fn.BYTES === LC) {\n            return undefined;\n        }\n        else {\n            return length === LC || length === LU;\n        }\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA) === true)\n            throw new Error('first arg must be private key');\n        if (isProbPub(publicB) === false)\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = ecdsaOpts.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\", for protection against DoS\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = ecdsaOpts.bits2int_modN ||\n        function (bytes) {\n            return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = bitMask(fnBits);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n        aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n        return Fn.toBytes(num);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash } = ecdsaOpts;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes_(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n        // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n        // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            // Important: all mod() calls here must be done over N\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!Fn.isValidNot0(k))\n                return; // Valid scalars (including k) must be in 1..N-1\n            const ik = Fn.inv(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = Fn.create(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n    const defaultVerOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const drbg = createHmacDrbg(ecdsaOpts.hash.outputLen, Fn.BYTES, hmac_);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE.precompute(8);\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        // Verify opts\n        validateSigVerOpts(opts);\n        const { lowS, prehash, format } = opts;\n        // TODO: remove\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && !['compact', 'der', 'js'].includes(format))\n            throw new Error('format must be \"compact\", \"der\" or \"js\"');\n        const isHex = typeof sg === 'string' || isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        // deduce signature format\n        try {\n            // if (format === 'js') {\n            //   if (sg != null && !isBytes(sg)) _sig = new Signature(sg.r, sg.s);\n            // } else if (format === 'compact') {\n            //   _sig = Signature.fromCompact(sg);\n            // } else if (format === 'der') {\n            //   _sig = Signature.fromDER(sg);\n            // } else {\n            //   throw new Error('invalid format');\n            // }\n            if (isObj) {\n                if (format === undefined || format === 'js') {\n                    _sig = new Signature(sg.r, sg.s);\n                }\n                else {\n                    throw new Error('invalid format');\n                }\n            }\n            if (isHex) {\n                // TODO: remove this malleable check\n                // Signature can be represented in 2 ways: compact (2*Fn.BYTES) & DER (variable-length).\n                // Since DER can also be 2*Fn.BYTES bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        // todo: optional.hash => hash\n        if (prehash)\n            msgHash = ecdsaOpts.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = Fn.inv(s); // s^-1\n        const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n        const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));\n        if (R.is0())\n            return false;\n        const v = Fn.create(R.x); // v = r.x mod n\n        return v === r;\n    }\n    // TODO: clarify API for cloning .clone({hash: sha512}) ? .createWith({hash: sha512})?\n    // const clone = (hash: CHash): ECDSA => ecdsa(Point, { ...ecdsaOpts, ...getHash(hash) }, curveOpts);\n    return Object.freeze({\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        utils,\n        Point,\n        Signature,\n    });\n}\nfunction _weierstrass_legacy_opts_to_new(c) {\n    const CURVE = {\n        a: c.a,\n        b: c.b,\n        p: c.Fp.ORDER,\n        n: c.n,\n        h: c.h,\n        Gx: c.Gx,\n        Gy: c.Gy,\n    };\n    const Fp = c.Fp;\n    const Fn = Field(CURVE.n, c.nBitLength);\n    const curveOpts = {\n        Fp,\n        Fn,\n        allowedPrivateKeyLengths: c.allowedPrivateKeyLengths,\n        allowInfinityPoint: c.allowInfinityPoint,\n        endo: c.endo,\n        wrapPrivateKey: c.wrapPrivateKey,\n        isTorsionFree: c.isTorsionFree,\n        clearCofactor: c.clearCofactor,\n        fromBytes: c.fromBytes,\n        toBytes: c.toBytes,\n    };\n    return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c) {\n    const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n    const ecdsaOpts = {\n        hash: c.hash,\n        hmac: c.hmac,\n        randomBytes: c.randomBytes,\n        lowS: c.lowS,\n        bits2int: c.bits2int,\n        bits2int_modN: c.bits2int_modN,\n    };\n    return { CURVE, curveOpts, ecdsaOpts };\n}\nfunction _weierstrass_new_output_to_legacy(c, Point) {\n    const { Fp, Fn } = Point;\n    // TODO: remove\n    function isWithinCurveOrder(num) {\n        return inRange(num, _1n, Fn.ORDER);\n    }\n    const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n    const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, c.allowedPrivateKeyLengths, c.wrapPrivateKey);\n    return Object.assign({}, {\n        CURVE: c,\n        Point: Point,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    });\n}\nfunction _ecdsa_new_output_to_legacy(c, ecdsa) {\n    return Object.assign({}, ecdsa, {\n        ProjectivePoint: ecdsa.Point,\n        CURVE: c,\n    });\n}\n// _ecdsa_legacy\nexport function weierstrass(c) {\n    const { CURVE, curveOpts, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    const signs = ecdsa(Point, ecdsaOpts, curveOpts);\n    return _ecdsa_new_output_to_legacy(c, signs);\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    const { A, B, Z } = opts;\n    if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n    if (!Fp.isOdd)\n        throw new Error('Field does not have .isOdd()');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n        x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher, isogenyMap, } from \"./abstract/hash-to-curve.js\";\nimport { Field, mod, pow2 } from \"./abstract/modular.js\";\nimport { mapToCurveSimpleSWU, } from \"./abstract/weierstrass.js\";\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, } from \"./utils.js\";\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE = {\n    p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: BigInt(1),\n    a: BigInt(0),\n    b: BigInt(7),\n    Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n    Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\n};\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1_CURVE.p;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1_CURVE.p, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1 = createCurve({\n    ...secp256k1_CURVE,\n    Fp: Fpk1,\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1_CURVE.n;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1_CURVE.p);\nconst modN = (x) => mod(x, secp256k1_CURVE.n);\nconst Point = /* @__PURE__ */ (() => secp256k1.Point)();\nconst hasEven = (y) => y % _2n === _0n;\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = hasEven(p.y) ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1_CURVE.p); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (!hasEven(y))\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = Point.fromAffine({ x, y }); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1_CURVE.p))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1_CURVE.n))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        // R = s⋅G - e⋅P, where -eP == (n-e)P\n        const R = Point.BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(modN(-e)));\n        const { x, y } = R.toAffine();\n        // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n        if (R.is0() || !hasEven(y) || x !== r)\n            return false;\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher = /* @__PURE__ */ (() => createHasher(secp256k1.Point, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => secp256k1_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => secp256k1_hasher.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { weierstrass } from \"./abstract/weierstrass.js\";\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return { hash };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, hash: hash });\n    return { ...create(defHash), create };\n}\n//# sourceMappingURL=_shortw_utils.js.map"],"names":["HMAC","constructor","hash","_key","super","this","finished","destroyed","key","iHash","create","update","Error","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","buf","digestInto","out","destroy","_cloneInto","to","Object","getPrototypeOf","clone","hmac","message","_0n","BigInt","_1n","abool","title","value","numberToHexUnpadded","num","hex","toString","hexToNumber","bytes","from","reverse","n","len","padStart","numberToBytesLE","expectedLength","res","e","isPosBig","_validateObject","object","fields","optFields","checkField","fieldName","expectedType","isOpt","val","undefined","current","entries","forEach","k","v","memoized","fn","map","WeakMap","arg","args","get","computed","_2n","_3n","_4n","_5n","_8n","a","b","result","pow2","x","power","modulo","invert","number","y","u","q","r","m","sqrt3mod4","Fp","p1div4","ORDER","root","pow","eql","sqr","sqrt5mod8","p5div8","n2","mul","nv","sub","ONE","FIELD_FIELDS","nums","passZero","inverted","Array","fill","ZERO","multipliedAcc","reduce","acc","is0","invertedAcc","inv","reduceRight","FpLegendre","p1mod2","powered","yes","zero","no","neg","Field","bitLenOrOpts","isLE","opts","_nbitLength","_sqrt","sqrt","_opts","BITS","nBitLength","nByteLength","BYTES","_nBitLength","Math","ceil","sqrtP","f","freeze","MASK","isValid","isValidNot0","isOdd","lhs","rhs","add","p","d","FpPow","div","sqrN","addN","subN","mulN","P","Q","S","Z","_Fp","cc","Q1div2","M","c","t","R","t_tmp","exponent","tonelliShanks","toBytes","fromBytes","invertBatch","lst","cmov","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","negateCt","condition","item","negate","validateW","W","bits","Number","isSafeInteger","calcWOpts","scalarBits","maxNumber","windows","windowSize","mask","shiftBy","calcOffsets","window","wOpts","wbits","nextN","offsetStart","offset","abs","isZero","isNeg","isNegF","offsetF","pointPrecomputes","pointWindowSizes","getW","assert0","pippenger","fieldN","points","scalars","isArray","validateMSMPoints","field","s","validateMSMScalars","plength","slength","bitLen","buckets","sum","floor","j","scalar","resI","sumI","double","createField","order","validateSigVerOpts","lowS","prehash","DERErr","DER","Err","_tlv","encode","tag","data","E","dataLen","lenLen","decode","pos","first","lengthBytes","subarray","l","_int","parseInt","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","hexFromSig","sig","seq","_legacyHelperNormPriv","Fn","allowedPrivateKeyLengths","wrapPrivateKey","expected","includes","padded","error","pprefix","hasEvenY","of","ecdsa","Point","ecdsaOpts","curveOpts","randomBytes","bits2int","bits2int_modN","randomBytes_","hmac_","msgs","CURVE_ORDER","fnBits","isBiggerThanHalfOrder","aValidRS","Signature","recovery","fromCompact","L","fromDER","assertValidity","addRecoveryBit","recoverPublicKey","msgHash","FIELD_ORDER","rec","radj","fromHex","ir","h","u1","u2","BASE","multiplyUnsafe","hasHighS","normalizeS","format","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","normPrivateKeyToScalar","utils","isValidPrivateKey","privateKey","randomPrivateKey","fieldLen","minLen","reduced","mapHashToField","precompute","point","isProbPub","LC","LU","delta","ORDER_MASK","int2octets","min","max","defaultSigOpts","defaultVerOpts","getPublicKey","isCompressed","fromPrivateKey","getSharedSecret","privateA","publicB","multiply","sign","privKey","seed","k2sig","some","extraEntropy","ent","h1int","seedArgs","push","kBytes","ik","toAffine","normS","prepSig","hashLen","qByteLen","hmacFn","u8n","u8of","byte","reset","reseed","gen","sl","slice","pred","createHmacDrbg","drbg","verify","signature","publicKey","sg","isHex","isObj","_sig","derError","is","weierstrass","CURVE","Gx","Gy","allowInfinityPoint","endo","isTorsionFree","clearCofactor","_weierstrass_legacy_opts_to_new","_ecdsa_legacy_opts_to_new","assign","ProjectivePoint","_ecdsa_new_output_to_legacy","type","params","_createCurveFields","cofactor","beta","splitScalar","assertCompressionIsSupported","_c","bx","head","tail","isValidXY","y2","weierstrassEquation","sqrtError","err","x2","x3","_legacyHelperEquat","left","right","_4a3","_27b2","acoord","banZero","aprjpoint","other","toAffineMemo","iz","px","py","pz","z","ax","ay","zz","assertValidMemo","finishEndo","endoBeta","k1p","k2p","k1neg","k2neg","fromAffine","normalizeZ","property","getz","toInv","msm","isLazy","wnaf","setWindowSize","_setWindowSize","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t2","t3","t4","t5","subtract","fake","wNAFCached","k1","k2","k1f","k2f","sc","hasPrecomputes","p1","p2","mulEndoUnsafe","wNAFCachedUnsafe","multiplyAndAddUnsafe","invertedZ","toRawBytes","toHex","constTimeNegate","elm","unsafeLadder","precomputeWindow","base","wNAF","precomputes","wo","wNAFUnsafe","getPrecomputes","transform","comp","prev","delete","weierstrassN","secp256k1_CURVE","divNearest","Fpk1","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","curveDef","defHash","createCurve","a1","b1","a2","POW_2_128","c1","c2","sha2"],"sourceRoot":""}