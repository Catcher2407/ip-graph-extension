(()=>{console.log("IP Graph Extension installed");const e={ethereum:/0x[a-fA-F0-9]{40}/g,storyIP:/0x[a-fA-F0-9]{40}/g,ensName:/[a-zA-Z0-9-]+\.eth/g,contractAddress:/0x[a-fA-F0-9]{40}/g};let t=new Map;function a(t){for(const[a,n]of Object.entries(e)){const e=t.match(n);if(e&&e.length>0)return{ip:e[0],type:a}}return null}function n(){const e=[],t={ethereum:/0x[a-fA-F0-9]{40}/g,ensName:/[a-zA-Z0-9-]+\.eth/g},a=document.createTreeWalker(document.body,NodeFilter.SHOW_TEXT,null),n=[];let o;for(;o=a.nextNode();)n.push(o);return n.forEach(a=>{const n=a.textContent||"";for(const[o,c]of Object.entries(t)){const t=n.match(c);t&&t.forEach(t=>{const c=n.indexOf(t),s=Math.max(0,c-50),r=Math.min(n.length,c+t.length+50),i=n.slice(s,r),l=a.parentElement,d=l?`${l.tagName.toLowerCase()}${l.className?"."+l.className:""}`:"text";e.push({ip:t,type:o,context:i.trim(),element:d})})}}),e.filter((e,t,a)=>t===a.findIndex(t=>t.ip===e.ip))}async function o(e,t){try{await chrome.notifications.create({type:"basic",iconUrl:"assets/icons/icon48.png",title:e,message:t})}catch(e){console.error("Notification failed:",e)}}chrome.runtime.onInstalled.addListener(()=>{chrome.contextMenus.create({id:"analyzeIP",title:"🔍 Analyze IP with Graph",contexts:["selection"]}),chrome.contextMenus.create({id:"searchStoryIP",title:"📊 Search in Story Protocol",contexts:["selection"]}),chrome.contextMenus.create({id:"detectPageIPs",title:"🎯 Detect All IPs on Page",contexts:["page"]}),chrome.contextMenus.create({id:"openExtension",title:"🚀 Open IP Graph Extension",contexts:["page"]}),chrome.contextMenus.create({id:"ipTypeSubmenu",title:"🔗 IP Asset Types",contexts:["selection"],parentId:"analyzeIP"}),chrome.contextMenus.create({id:"analyzeAsOriginal",title:"🎨 Analyze as Original Work",contexts:["selection"],parentId:"ipTypeSubmenu"}),chrome.contextMenus.create({id:"analyzeAsDerivative",title:"🔄 Analyze as Derivative",contexts:["selection"],parentId:"ipTypeSubmenu"}),chrome.contextMenus.create({id:"analyzeAsLicense",title:"📜 Analyze as License",contexts:["selection"],parentId:"ipTypeSubmenu"}),console.log("Context menus created")}),chrome.contextMenus.onClicked.addListener(async(e,t)=>{console.log("Context menu clicked:",e.menuItemId,e);try{switch(e.menuItemId){case"analyzeIP":case"analyzeAsOriginal":case"analyzeAsDerivative":case"analyzeAsLicense":await async function(e,t){if(!e.selectionText||!t?.id)return;const n=e.selectionText.trim(),c=a(n);var s;c?(await chrome.storage.local.set({selectedIP:c.ip,ipType:(s=e.menuItemId,{analyzeAsOriginal:"original",analyzeAsDerivative:"derivative",analyzeAsLicense:"license",analyzeIP:"unknown"}[s]||"unknown"),fromContextMenu:!0,sourceUrl:t.url,sourceTitle:t.title,timestamp:Date.now(),selectionContext:n}),await o("IP Detected",`Found ${c.type}: ${c.ip.slice(0,10)}...`),await chrome.action.openPopup()):await o("No IP Found","Selected text does not contain a valid IP address")}(e,t);break;case"searchStoryIP":await async function(e,t){if(!e.selectionText||!t?.id)return;const n=a(e.selectionText.trim());n&&(await chrome.storage.local.set({selectedIP:n.ip,searchType:"story-protocol",fromContextMenu:!0,sourceUrl:t.url,timestamp:Date.now()}),await o("Story IP Search",`Searching Story Protocol for ${n.ip.slice(0,10)}...`),await chrome.action.openPopup())}(e,t);break;case"detectPageIPs":await async function(e){if(e?.id)try{const t=await chrome.scripting.executeScript({target:{tabId:e.id},func:n});if(t&&t[0]?.result){const a=t[0].result;a.length>0?(await chrome.storage.local.set({detectedIPs:a,fromPageDetection:!0,sourceUrl:e.url,sourceTitle:e.title,timestamp:Date.now()}),await o("IPs Detected",`Found ${a.length} IP address${a.length>1?"es":""} on this page`),await chrome.action.openPopup()):await o("No IPs Found","No IP addresses detected on this page")}}catch(e){console.error("Page IP detection failed:",e),await o("Detection Failed","Could not scan page for IP addresses")}}(t);break;case"openExtension":await async function(){await chrome.action.openPopup()}()}}catch(e){console.error("Context menu handler error:",e)}}),chrome.runtime.onMessage.addListener((e,t,a)=>{switch(console.log("Background received message:",e),e.action){case"analyzeIP":!async function(e,t,a){try{await chrome.storage.local.set({selectedIP:e.ipId,fromMessage:!0,timestamp:Date.now()}),a({success:!0})}catch(e){a({success:!1,error:e.message})}}(e,0,a);break;case"getStoredIP":!async function(e,t,a){try{a(await chrome.storage.local.get(["selectedIP","ipType","fromContextMenu","fromPageDetection","fromMessage","sourceUrl","sourceTitle","selectionContext","detectedIPs","searchType","timestamp"])),await chrome.storage.local.remove(["fromContextMenu","fromPageDetection","fromMessage"])}catch(e){a({error:e.message})}}(0,0,a);break;case"getDetectedIPs":!async function(e,t,a){try{a(await chrome.storage.local.get(["detectedIPs"]))}catch(e){a({error:e.message})}}(0,0,a);break;case"clearStoredData":!async function(e,t,a){try{await chrome.storage.local.clear(),a({success:!0})}catch(e){a({success:!1,error:e.message})}}(0,0,a)}return!0}),chrome.action.onClicked.addListener(e=>{chrome.action.openPopup()}),chrome.tabs.onUpdated.addListener(async(e,a,o)=>{if("complete"===a.status&&o.url)try{const a=await chrome.scripting.executeScript({target:{tabId:e},func:n});if(a&&a[0]?.result){const n=a[0].result;n.length>0&&(t.set(e,n.map(e=>({...e,timestamp:Date.now()}))),await chrome.action.setBadgeText({text:n.length.toString(),tabId:e}),await chrome.action.setBadgeBackgroundColor({color:"#667eea",tabId:e}))}}catch(e){}}),chrome.tabs.onRemoved.addListener(e=>{t.delete(e)})})();
//# sourceMappingURL=background.js.map