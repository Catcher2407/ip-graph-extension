{"version":3,"file":"content.js","mappings":"MAYA,SAASA,IACP,MAAMC,EATR,WACE,MAEMC,EADWC,SAASC,KAAKC,UACNC,MAFP,sBAGlB,OAAOJ,EAAU,IAAI,IAAIK,IAAIL,IAAY,EAC3C,CAIsBM,GAEpB,GAAIP,EAAYQ,OAAS,EAAG,CAE1B,MAAMC,EAAYP,SAASQ,cAAc,OACzCD,EAAUE,GAAK,qBACfF,EAAUG,UAAY,0cAgBbZ,EAAYQ,YAAYR,EAAYQ,OAAS,EAAI,IAAM,kCAIhEC,EAAUI,iBAAiB,QAAS,KAClCC,OAAOC,QAAQC,YAAY,CACzBC,OAAQ,YACRC,KAAMlB,EAAY,OAItBE,SAASC,KAAKgB,YAAYV,GAG1BW,WAAW,KACLX,EAAUY,YACZZ,EAAUa,UAEX,IACL,CACF,CAtDAC,QAAQC,IAAI,kCAyDgB,YAAxBtB,SAASuB,WACXvB,SAASW,iBAAiB,mBAAoBd,GAE9CA,IAIe,IAAI2B,iBAAkBC,IACrC,IAAIC,GAAc,EAClBD,EAAUE,QAASC,IACK,cAAlBA,EAASC,MAAwBD,EAASE,WAAWxB,OAAS,IAChEoB,GAAc,KAIdA,IAEFK,aAAcC,OAAeC,gBAC5BD,OAAeC,eAAiBf,WAAWrB,EAAiB,QAIxDqC,QAAQlC,SAASC,KAAM,CAC9BkC,WAAW,EACXC,SAAS,G","sources":["webpack://ip-graph-extension/./src/content/content.ts"],"sourcesContent":["// Content script for IP Graph Extension\nconsole.log('IP Graph content script loaded');\n\n// Detect IP addresses on the page\nfunction detectIPAddresses(): string[] {\n  const ipPattern = /0x[a-fA-F0-9]{40}/g;\n  const pageText = document.body.innerText;\n  const matches = pageText.match(ipPattern);\n  return matches ? [...new Set(matches)] : [];\n}\n\n// Add visual indicators for detected IPs\nfunction addIPIndicators(): void {\n  const ipAddresses = detectIPAddresses();\n  \n  if (ipAddresses.length > 0) {\n    // Create floating indicator\n    const indicator = document.createElement('div');\n    indicator.id = 'ip-graph-indicator';\n    indicator.innerHTML = `\n      <div style=\"\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        padding: 10px 15px;\n        border-radius: 20px;\n        font-size: 12px;\n        font-weight: bold;\n        z-index: 10000;\n        box-shadow: 0 4px 15px rgba(0,0,0,0.2);\n        cursor: pointer;\n        transition: all 0.3s ease;\n      \">\n        ðŸ“Š ${ipAddresses.length} IP${ipAddresses.length > 1 ? 's' : ''} detected\n      </div>\n    `;\n    \n    indicator.addEventListener('click', () => {\n      chrome.runtime.sendMessage({\n        action: 'analyzeIP',\n        ipId: ipAddresses[0] // Analyze first detected IP\n      });\n    });\n    \n    document.body.appendChild(indicator);\n    \n    // Auto-hide after 5 seconds\n    setTimeout(() => {\n      if (indicator.parentNode) {\n        indicator.remove();\n      }\n    }, 5000);\n  }\n}\n\n// Run detection when page loads\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', addIPIndicators);\n} else {\n  addIPIndicators();\n}\n\n// Re-run detection on dynamic content changes\nconst observer = new MutationObserver((mutations) => {\n  let shouldCheck = false;\n  mutations.forEach((mutation) => {\n    if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n      shouldCheck = true;\n    }\n  });\n  \n  if (shouldCheck) {\n    // Debounce the check\n    clearTimeout((window as any).ipCheckTimeout);\n    (window as any).ipCheckTimeout = setTimeout(addIPIndicators, 1000);\n  }\n});\n\nobserver.observe(document.body, {\n  childList: true,\n  subtree: true\n});"],"names":["addIPIndicators","ipAddresses","matches","document","body","innerText","match","Set","detectIPAddresses","length","indicator","createElement","id","innerHTML","addEventListener","chrome","runtime","sendMessage","action","ipId","appendChild","setTimeout","parentNode","remove","console","log","readyState","MutationObserver","mutations","shouldCheck","forEach","mutation","type","addedNodes","clearTimeout","window","ipCheckTimeout","observe","childList","subtree"],"sourceRoot":""}