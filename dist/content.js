(()=>{function e(){const e=function(){const e=document.body.innerText.match(/0x[a-fA-F0-9]{40}/g);return e?[...new Set(e)]:[]}();if(e.length>0){const n=document.createElement("div");n.id="ip-graph-indicator",n.innerHTML=`\n      <div style="\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n        padding: 10px 15px;\n        border-radius: 20px;\n        font-size: 12px;\n        font-weight: bold;\n        z-index: 10000;\n        box-shadow: 0 4px 15px rgba(0,0,0,0.2);\n        cursor: pointer;\n        transition: all 0.3s ease;\n      ">\n        ðŸ“Š ${e.length} IP${e.length>1?"s":""} detected\n      </div>\n    `,n.addEventListener("click",()=>{chrome.runtime.sendMessage({action:"analyzeIP",ipId:e[0]})}),document.body.appendChild(n),setTimeout(()=>{n.parentNode&&n.remove()},5e3)}}console.log("IP Graph content script loaded"),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",e):e(),new MutationObserver(n=>{let t=!1;n.forEach(e=>{"childList"===e.type&&e.addedNodes.length>0&&(t=!0)}),t&&(clearTimeout(window.ipCheckTimeout),window.ipCheckTimeout=setTimeout(e,1e3))}).observe(document.body,{childList:!0,subtree:!0})})();
//# sourceMappingURL=content.js.map